## Calendar Event Management System - Django Implementation Guide

Hey Django programmer, you need to build a **Calendar with Event Management** system. Here's exactly what to implement:

---

## **OVERVIEW:**

Build a full calendar application with:
1. Monthly calendar view
2. Multiple view options (Month, Week, Day, List)
3. Event creation form
4. Navigation between months
5. Single and date range events

---

## **PART 1: DJANGO MODELS**

Create a `calendar_app/models.py`:

```python
from django.db import models
from django.contrib.auth.models import User

class Event(models.Model):
    EVENT_TYPE_CHOICES = [
        ('single', 'Single Date'),
        ('range', 'Date Range'),
    ]
    
    name = models.CharField(max_length=200)
    event_type = models.CharField(max_length=10, choices=EVENT_TYPE_CHOICES, default='single')
    start_date = models.DateTimeField()
    end_date = models.DateTimeField(null=True, blank=True)  # Only for range events
    participants = models.ManyToManyField(User, related_name='events', blank=True)
    created_by = models.ForeignKey(User, on_delete=models.CASCADE, related_name='created_events')
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        ordering = ['start_date']
    
    def __str__(self):
        return self.name
```

Run migrations:
```bash
python manage.py makemigrations
python manage.py migrate
```

---

## **PART 2: DJANGO VIEWS**

Create `calendar_app/views.py`:

```python
from django.shortcuts import render, redirect
from django.contrib.auth.decorators import login_required
from django.http import JsonResponse
from datetime import datetime, timedelta
import calendar as cal
from .models import Event
from .forms import EventForm

@login_required
def calendar_view(request):
    # Get current month/year from GET params or use current date
    year = int(request.GET.get('year', datetime.now().year))
    month = int(request.GET.get('month', datetime.now().month))
    view_type = request.GET.get('view', 'month')  # month, week, day, list
    
    # Create calendar
    cal_obj = cal.monthcalendar(year, month)
    month_name = cal.month_name[month]
    
    # Get events for this month
    start_date = datetime(year, month, 1)
    if month == 12:
        end_date = datetime(year + 1, 1, 1)
    else:
        end_date = datetime(year, month + 1, 1)
    
    events = Event.objects.filter(
        start_date__gte=start_date,
        start_date__lt=end_date
    )
    
    # Organize events by day
    events_by_day = {}
    for event in events:
        day = event.start_date.day
        if day not in events_by_day:
            events_by_day[day] = []
        events_by_day[day].append(event)
    
    context = {
        'calendar': cal_obj,
        'year': year,
        'month': month,
        'month_name': month_name,
        'events_by_day': events_by_day,
        'view_type': view_type,
        'today': datetime.now(),
    }
    
    return render(request, 'calendar/calendar.html', context)

@login_required
def create_event(request):
    if request.method == 'POST':
        form = EventForm(request.POST)
        if form.is_valid():
            event = form.save(commit=False)
            event.created_by = request.user
            event.save()
            form.save_m2m()  # Save many-to-many relationships
            return JsonResponse({'success': True, 'message': 'Event created successfully'})
        else:
            return JsonResponse({'success': False, 'errors': form.errors}, status=400)
    
    return JsonResponse({'success': False, 'message': 'Invalid request'}, status=400)
```

---

## **PART 3: DJANGO FORMS**

Create `calendar_app/forms.py`:

```python
from django import forms
from django.contrib.auth.models import User
from .models import Event

class EventForm(forms.ModelForm):
    participants = forms.ModelMultipleChoiceField(
        queryset=User.objects.all(),
        widget=forms.SelectMultiple(attrs={
            'class': 'form-control',
            'placeholder': 'Select participants'
        }),
        required=False
    )
    
    class Meta:
        model = Event
        fields = ['name', 'event_type', 'start_date', 'end_date', 'participants']
        widgets = {
            'name': forms.TextInput(attrs={
                'class': 'form-control',
                'placeholder': 'Event Name'
            }),
            'event_type': forms.RadioSelect(attrs={
                'class': 'form-check-input'
            }),
            'start_date': forms.DateTimeInput(attrs={
                'class': 'form-control',
                'type': 'datetime-local'
            }),
            'end_date': forms.DateTimeInput(attrs={
                'class': 'form-control',
                'type': 'datetime-local'
            }),
        }
    
    def clean(self):
        cleaned_data = super().clean()
        event_type = cleaned_data.get('event_type')
        start_date = cleaned_data.get('start_date')
        end_date = cleaned_data.get('end_date')
        
        if event_type == 'range' and not end_date:
            raise forms.ValidationError("End date is required for date range events")
        
        if end_date and start_date and end_date < start_date:
            raise forms.ValidationError("End date must be after start date")
        
        return cleaned_data
```

---

## **PART 4: URLS**

Create `calendar_app/urls.py`:

```python
from django.urls import path
from . import views

app_name = 'calendar'

urlpatterns = [
    path('', views.calendar_view, name='calendar'),
    path('create-event/', views.create_event, name='create_event'),
]
```

Add to main `urls.py`:
```python
from django.urls import path, include

urlpatterns = [
    # ... other patterns
    path('calendar/', include('calendar_app.urls')),
]
```

---

## **PART 5: TEMPLATE**

Create `templates/calendar/calendar.html`:

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Calendar - September 2025</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background-color: #f5f5f5;
            padding: 20px;
        }
        
        .container {
            max-width: 1400px;
            margin: 0 auto;
            display: flex;
            gap: 20px;
        }
        
        .calendar-container {
            flex: 1;
            background: white;
            padding: 30px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        .calendar-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }
        
        .calendar-nav {
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .nav-btn {
            background: #f0f0f0;
            border: none;
            padding: 8px 12px;
            cursor: pointer;
            border-radius: 4px;
            font-size: 18px;
        }
        
        .today-btn {
            background: #2196F3;
            color: white;
            border: none;
            padding: 8px 16px;
            cursor: pointer;
            border-radius: 4px;
        }
        
        .month-title {
            font-size: 24px;
            font-weight: 600;
            color: #333;
        }
        
        .view-options {
            display: flex;
            gap: 5px;
        }
        
        .view-btn {
            padding: 8px 16px;
            border: 1px solid #ddd;
            background: white;
            cursor: pointer;
            border-radius: 4px;
        }
        
        .view-btn.active {
            background: #2196F3;
            color: white;
            border-color: #2196F3;
        }
        
        .calendar-grid {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            gap: 1px;
            background: #e0e0e0;
            border: 1px solid #e0e0e0;
        }
        
        .calendar-day-header {
            background: #f5f5f5;
            padding: 10px;
            text-align: center;
            font-weight: 600;
            color: #666;
        }
        
        .calendar-day {
            background: white;
            min-height: 100px;
            padding: 8px;
            position: relative;
        }
        
        .calendar-day.today {
            background: #fffde7;
        }
        
        .day-number {
            font-size: 14px;
            color: #333;
        }
        
        .sidebar {
            width: 350px;
            background: white;
            padding: 30px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        .sidebar-title {
            font-size: 20px;
            font-weight: 600;
            margin-bottom: 20px;
        }
        
        .form-group {
            margin-bottom: 20px;
        }
        
        .form-label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
            color: #333;
        }
        
        .form-control {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 14px;
        }
        
        .radio-group {
            display: flex;
            gap: 20px;
            margin-top: 8px;
        }
        
        .radio-label {
            display: flex;
            align-items: center;
            gap: 8px;
            cursor: pointer;
        }
        
        .create-btn {
            width: 100%;
            padding: 12px;
            background: #B2EBF2;
            color: #00838F;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
            font-weight: 500;
        }
        
        .create-btn:hover {
            background: #80DEEA;
        }
    </style>
</head>
<body>
    <div class="container">
        <!-- Calendar Section -->
        <div class="calendar-container">
            <div class="calendar-header">
                <div class="calendar-nav">
                    <button class="nav-btn" onclick="previousMonth()">❮</button>
                    <button class="nav-btn" onclick="nextMonth()">❯</button>
                    <button class="today-btn" onclick="goToToday()">Today</button>
                    <h2 class="month-title">{{ month_name }} {{ year }}</h2>
                </div>
                
                <div class="view-options">
                    <button class="view-btn {% if view_type == 'month' %}active{% endif %}" 
                            onclick="changeView('month')">Month</button>
                    <button class="view-btn {% if view_type == 'week' %}active{% endif %}" 
                            onclick="changeView('week')">Week</button>
                    <button class="view-btn {% if view_type == 'day' %}active{% endif %}" 
                            onclick="changeView('day')">Day</button>
                    <button class="view-btn {% if view_type == 'list' %}active{% endif %}" 
                            onclick="changeView('list')">List</button>
                </div>
            </div>
            
            <div class="calendar-grid">
                <!-- Day headers -->
                <div class="calendar-day-header">Mon</div>
                <div class="calendar-day-header">Tue</div>
                <div class="calendar-day-header">Wed</div>
                <div class="calendar-day-header">Thu</div>
                <div class="calendar-day-header">Fri</div>
                <div class="calendar-day-header">Sat</div>
                <div class="calendar-day-header">Sun</div>
                
                <!-- Calendar days -->
                {% for week in calendar %}
                    {% for day in week %}
                        <div class="calendar-day {% if day == today.day and month == today.month and year == today.year %}today{% endif %}">
                            {% if day != 0 %}
                                <div class="day-number">{{ day }}</div>
                                {% if day in events_by_day %}
                                    {% for event in events_by_day|get_item:day %}
                                        <div class="event-item">{{ event.name }}</div>
                                    {% endfor %}
                                {% endif %}
                            {% endif %}
                        </div>
                    {% endfor %}
                {% endfor %}
            </div>
        </div>
        
        <!-- Sidebar: Add Event Form -->
        <div class="sidebar">
            <h3 class="sidebar-title">Add Event</h3>
            
            <form id="eventForm" method="POST">
                {% csrf_token %}
                
                <div class="form-group">
                    <label class="form-label">Event Name</label>
                    <input type="text" name="name" class="form-control" placeholder="Event Name" required>
                </div>
                
                <div class="form-group">
                    <label class="form-label">Event Participants</label>
                    <select name="participants" class="form-control" multiple>
                        <option value="">Select participants</option>
                        <!-- Will be populated dynamically -->
                    </select>
                </div>
                
                <div class="form-group">
                    <label class="form-label">Event Dates</label>
                    <div class="radio-group">
                        <label class="radio-label">
                            <input type="radio" name="event_type" value="single" checked>
                            Single
                        </label>
                        <label class="radio-label">
                            <input type="radio" name="event_type" value="range">
                            Range
                        </label>
                    </div>
                </div>
                
                <div class="form-group">
                    <label class="form-label">Start Date</label>
                    <input type="datetime-local" name="start_date" class="form-control" required>
                </div>
                
                <div class="form-group" id="endDateGroup" style="display: none;">
                    <label class="form-label">End Date</label>
                    <input type="datetime-local" name="end_date" class="form-control">
                </div>
                
                <button type="submit" class="create-btn">Create Event</button>
            </form>
        </div>
    </div>

    <script>
        // Show/hide end date based on event type
        document.querySelectorAll('input[name="event_type"]').forEach(radio => {
            radio.addEventListener('change', function() {
                const endDateGroup = document.getElementById('endDateGroup');
                if (this.value === 'range') {
                    endDateGroup.style.display = 'block';
                } else {
                    endDateGroup.style.display = 'none';
                }
            });
        });
        
        // Form submission
        document.getElementById('eventForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const formData = new FormData(this);
            
            try {
                const response = await fetch('{% url "calendar:create_event" %}', {
                    method: 'POST',
                    body: formData,
                    headers: {
                        'X-CSRFToken': '{{ csrf_token }}'
                    }
                });
                
                const data = await response.json();
                
                if (data.success) {
                    alert('Event created successfully!');
                    location.reload();
                } else {
                    alert('Error creating event: ' + JSON.stringify(data.errors));
                }
            } catch (error) {
                console.error('Error:', error);
                alert('An error occurred');
            }
        });
        
        function previousMonth() {
            const currentMonth = {{ month }};
            const currentYear = {{ year }};
            let newMonth = currentMonth - 1;
            let newYear = currentYear;
            
            if (newMonth < 1) {
                newMonth = 12;
                newYear -= 1;
            }
            
            window.location.href = `?year=${newYear}&month=${newMonth}&view={{ view_type }}`;
        }
        
        function nextMonth() {
            const currentMonth = {{ month }};
            const currentYear = {{ year }};
            let newMonth = currentMonth + 1;
            let newYear = currentYear;
            
            if (newMonth > 12) {
                newMonth = 1;
                newYear += 1;
            }
            
            window.location.href = `?year=${newYear}&month=${newMonth}&view={{ view_type }}`;
        }
        
        function goToToday() {
            const today = new Date();
            window.location.href = `?year=${today.getFullYear()}&month=${today.getMonth() + 1}&view={{ view_type }}`;
        }
        
        function changeView(view) {
            window.location.href = `?year={{ year }}&month={{ month }}&view=${view}`;
        }
    </script>
</body>
</html>
```

---

## **PART 6: ADDITIONAL FEATURES TO IMPLEMENT**

### **1. Template Filter for Dictionary Access**

Create `calendar_app/templatetags/calendar_filters.py`:

```python
from django import template

register = template.Library()

@register.filter
def get_item(dictionary, key):
    return dictionary.get(key, [])
```

### **2. API Endpoint for AJAX (Optional)**

Add to `views.py`:

```python
from django.views.decorators.http import require_http_methods
import json

@require_http_methods(["GET"])
def get_events(request):
    year = int(request.GET.get('year'))
    month = int(request.GET.get('month'))
    
    start_date = datetime(year, month, 1)
    if month == 12:
        end_date = datetime(year + 1, 1, 1)
    else:
        end_date = datetime(year, month + 1, 1)
    
    events = Event.objects.filter(
        start_date__gte=start_date,
        start_date__lt=end_date
    ).values('id', 'name', 'start_date', 'end_date', 'event_type')
    
    return JsonResponse(list(events), safe=False)
```

---

## **KEY FEATURES IMPLEMENTED:**

1. **Calendar Navigation**: Previous/Next month arrows, Today button
2. **Multiple Views**: Month (default), Week, Day, List view options
3. **Event Creation**: Form with single date or date range options
4. **Participants Selection**: Multi-select dropdown for users
5. **Visual Indicators**: Today's date highlighted
6. **Responsive Layout**: Two-column layout (calendar + sidebar form)
7. **AJAX Form Submission**: No page reload when creating events

---

## **TO TEST:**

1. Create superuser: `python manage.py createsuperuser`
2. Run server: `python manage.py runserver`
3. Navigate to `/calendar/`
4. Add events using the sidebar form
5. Navigate between months
6. Switch between view types

---

## **NEXT STEPS (OPTIONAL ENHANCEMENTS):**

- Add event editing/deletion
- Implement Week, Day, and List views (currently only Month is fully functional)
- Add event colors/categories
- Add drag-and-drop to reschedule events
- Add event reminders/notifications
- Export calendar to iCal format
- Add recurring events functionality

Start with this base implementation and expand as needed.