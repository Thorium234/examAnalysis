# SchoolCheng-Ji System Documentation

## System Overview

SchoolCheng-Ji is a comprehensive Django-based school management system designed for multi-tenancy, supporting multiple schools with features for user management, exam management, student tracking, billing, reporting, and more. The system uses Django's built-in authentication with a custom user model for school-specific multi-tenancy.

### Key Features
- Multi-tenant architecture (one system for multiple schools)
- User roles: Teachers, Students, HODs, School Admins
- Exam management with grading systems
- Student performance tracking
- Billing and payment management
- Event calendar
- Comprehensive reporting
- Subject and class management

### Technology Stack
- **Backend**: Django (Python web framework)
- **Database**: SQLite (development), PostgreSQL (production)
- **Frontend**: HTML, CSS, JavaScript (Django templates)
- **Authentication**: Django's auth system with custom user model

## Apps Overview

The system is organized into the following Django apps:

1. **accounts** - User authentication, profiles, and role management
2. **billing** - Subscription, invoice, and payment management
3. **events** - Calendar and event management
4. **exams** - Exam creation, grading systems, and result management
5. **reports** - Report generation and settings
6. **school** - School-wide dashboards and management
7. **students** - Student records and advancement tracking
8. **subjects** - Subject and paper management

---

## Accounts App

### Models

#### CustomUser
Extends Django's AbstractUser for multi-tenancy.
- `school`: ForeignKey to School (nullable for superusers)
- Inherits username, email, password, etc. from AbstractUser

#### Role
Defines user roles in the system.
- `name`: Role name (e.g., 'Teacher', 'Student')
- `description`: Optional description

#### Profile
User profile with roles and contact info.
- `user`: OneToOneField to CustomUser
- `roles`: ManyToManyField to Role
- `phone_number`: CharField with Kenyan phone validation

#### TeacherClass
Links teachers to specific classes.
- `teacher`: ForeignKey to CustomUser
- `school`: ForeignKey to School
- `form_level`: IntegerField (1-4)
- `stream`: CharField
- `is_class_teacher`: BooleanField

#### TeacherSubject
Assigns subjects to teachers.
- `teacher`: ForeignKey to CustomUser
- `subject`: ForeignKey to Subject

#### TeacherGroup
Groups teachers for management.
- `name`: Group name
- `school`: ForeignKey to School

#### TeacherGroupMembership
Links teachers to groups.
- `teacher`: ForeignKey to CustomUser
- `group`: ForeignKey to TeacherGroup

### Admin
- CustomUserAdmin: Extends UserAdmin with school field
- ProfileAdmin: Displays roles and phone
- TeacherClassAdmin: Filters by school, form, stream

### Views
- **Authentication Views**: Multi-step login, password reset, student login
- **Dashboard Views**: Teacher and student dashboards with analytics
- **Profile Management**: Create/update profiles, change passwords
- **Teacher Management**: CRUD for teacher classes

### URLs
- `/find-account/`: Multi-step account finding
- `/profile/`: User profile management
- `/dashboard/`: Teacher dashboard
- `/student-login/`: Student authentication

### Templates
- `login.html`, `student_login.html`: Authentication forms
- `teacher_dashboard.html`: Teacher analytics dashboard
- `student_dashboard.html`: Student performance view
- `profile_form.html`: Profile management
- Various password reset and account management templates

---

## Billing App

### Models

#### Subscription
School subscription management.
- `school`: OneToOneField to School
- `subscription_type`: 'ANNUAL' or 'MONTHLY'
- `start_date`, `end_date`: DateFields
- `amount`: DecimalField
- `status`: 'ACTIVE', 'EXPIRED', 'CANCELLED'
- `auto_renew`: BooleanField

#### Invoice
Billing invoices.
- `school`: ForeignKey to School
- `invoice_number`: Unique CharField
- `item_description`: TextField
- `period_start`, `period_end`: DateFields
- `net_amount`, `vat_amount`, `gross_amount`: DecimalFields
- `balance_due`: DecimalField
- `status`: 'PENDING', 'PAID', 'OVERDUE', 'CANCELLED'

#### Receipt
Payment receipts.
- `invoice`: ForeignKey to Invoice
- `receipt_number`: Unique CharField
- `amount`: DecimalField
- `date_paid`: DateField
- `mode_of_payment`: 'M_PESA', 'BANK_TRANSFER', 'CHEQUE', 'CASH'
- `status`: 'PENDING', 'COMPLETED', 'FAILED'

#### Payment
Individual student payments.
- `school`: ForeignKey to School
- `student`: ForeignKey to Student
- `amount`: DecimalField
- `payment_type`: 'FEES', 'EXAM', 'OTHER'

### Admin
- SubscriptionAdmin: List display with filters
- InvoiceAdmin: Read-only fields, search by school
- ReceiptAdmin: Filter by payment mode and date
- PaymentAdmin: Search by student name/number

### Views
- `invoice_list`: Display school invoices with balance summary
- `invoice_detail`: Show invoice with receipts
- `pay_invoice`: Payment modal (M-Pesa integration placeholder)
- `receipt_list`: List receipts
- `process_payment`: AJAX payment processing

### URLs
- `/`: Invoice list
- `/invoices/<id>/`: Invoice detail
- `/receipts/`: Receipt list
- `/payment/process/`: Payment processing

### Templates
- `invoice_list.html`: Invoice overview with balances
- `receipt_list.html`: Payment receipts display

---

## Events App

### Models

#### Event
Calendar events.
- `school`: ForeignKey to School
- `name`: CharField
- `event_type`: 'single' or 'range'
- `start_date`, `end_date`: DateTimeFields
- `participants_type`: 'teachers', 'parents', 'students', 'staff', 'all'
- `participants`: ManyToManyField to CustomUser
- `created_by`: ForeignKey to CustomUser

### Admin
- No custom admin classes (uses default)

### Views
- `calendar_view`: Monthly calendar with events
- `create_event`: AJAX event creation

### URLs
- `/`: Calendar view
- `/create-event/`: Event creation

### Templates
- `calendar.html`: Monthly calendar display

---

## Exams App

### Models

#### GradingSystem
School grading configurations.
- `school`: ForeignKey to School
- `subject_category`: ForeignKey to SubjectCategory (optional)
- `name`: CharField
- `is_active`, `is_default`: BooleanFields

#### GradingRange
Grade boundaries.
- `grading_system`: ForeignKey to GradingSystem
- `min_marks`, `max_marks`: IntegerFields
- `grade`: CharField (e.g., 'A', 'B+')
- `points`: IntegerField

#### Exam
Exam definitions.
- `school`: ForeignKey to School
- `name`: CharField
- `form_level`: IntegerField (1-4)
- `year`, `term`: IntegerFields
- `participating_forms`: ManyToManyField to FormLevel
- Various boolean flags for exam types

#### PaperResult
Individual paper results.
- `exam`: ForeignKey to Exam
- `student`: ForeignKey to Student
- `subject_paper`: ForeignKey to SubjectPaper
- `marks`: IntegerField

#### ExamResult
Calculated subject results.
- `exam`: ForeignKey to Exam
- `student`: ForeignKey to Student
- `subject`: ForeignKey to Subject
- `final_marks`: IntegerField
- `grade`, `points`: Calculated fields
- `subject_rank`: IntegerField

#### StudentExamSummary
Aggregated exam performance.
- `exam`: ForeignKey to Exam
- `student`: ForeignKey to Student
- `total_marks`, `mean_marks`: FloatFields
- `mean_grade`: CharField
- `stream_position`, `overall_position`: IntegerFields
- Best of 7 subjects calculations

### Admin
- GradingSystemAdmin: With inline GradingRange
- ExamAdmin: Filters by school, form, year
- Various result admins with search and filters

### Views
- **Exam Management**: CRUD for exams, grading systems
- **Result Entry**: Hierarchical result entry (form -> subject -> students)
- **Bulk Operations**: CSV upload/download for results
- **Analytics**: Subject, stream, and overall performance views
- **Reporting**: PDF generation for results

### URLs
- `/`: Exam list
- `/create/`: Exam creation
- `/results/form-levels/`: Hierarchical result entry
- `/grading-systems/`: Grading management
- Various result and report URLs

### Templates
- `exam_list.html`: Exam overview
- `exam_subject_results_entry.html`: Bulk result entry
- `stream_results.html`: Stream performance
- `gradingsystem_form.html`: Grading configuration
- Many admin and reporting templates

---

## Reports App

### Models

#### ReportSettings
School report configuration.
- `school`: OneToOneField to School
- Various boolean flags for report elements
- Text fields for remarks and dates

### Admin
- ReportSettingsAdmin: List display with school filter

### Views
- ReportSettingsCreateView/UpdateView: CRUD for settings

### URLs
- `/settings/create/`: Create settings
- `/settings/update/`: Update settings

### Templates
- `report_settings_form.html`: Settings form
- `pdf_template_report_card.html`: Report card PDF
- `pdf_template_merit_list.html`: Merit list PDF
- Various report generation templates

---

## School App

### Models

#### School
Core school information.
- `name`: Unique CharField
- `school_code`: Unique code for student auth
- `location`, `address`: CharFields
- `logo`: ImageField
- `phone_number`, `email`: Contact fields

#### FormLevel
Form levels (1-4).
- `school`: ForeignKey to School
- `number`: IntegerField (1-4)

#### Stream
Streams within forms (e.g., North, South).
- `school`: ForeignKey to School
- `name`: CharField
- `form_level`: ForeignKey to FormLevel

#### Resource
Educational resources.
- `school`: ForeignKey to School
- `title`, `description`: CharFields
- `file`, `url`: File/URL fields
- `resource_type`: Choice field
- `subject`, `form_level`: Optional links

### Admin
- SchoolAdmin: Basic list display
- ResourceAdmin: Filters by type and level

### Views
- **Dashboards**: School-wide, form, stream, subject dashboards
- **Management**: CRUD for schools, forms, streams
- **Analytics**: Performance reports, top performers
- **User Management**: Teacher/student lists

### URLs
- `/`: School dashboard
- `/class/<form>/`: Form dashboard
- `/stream/<form>/<stream>/`: Stream dashboard
- `/reports/`: Reports and analysis
- Various management URLs

### Templates
- `school_dashboard.html`: Main school overview
- `stream_dashboard.html`: Stream performance
- `department_dashboard.html`: Subject category analysis
- Various management forms

---

## Students App

### Models

#### Student
Student records.
- `school`: ForeignKey to School
- `name`: CharField
- `admission_number`: Unique CharField
- `kcpe_marks`: IntegerField (optional)
- `form_level`: ForeignKey to FormLevel
- `subjects`: ManyToManyField to Subject

#### StudentAdvancement
Form advancement tracking.
- `student`: ForeignKey to Student
- `from_form_level`, `to_form_level`: ForeignKeys
- `advancement_year`: IntegerField

### Admin
- StudentAdmin: With advancement inline
- StudentAdvancementAdmin: Date hierarchy

### Views
- StudentListView: Paginated student list
- Student CRUD views: Create, update, delete
- StudentSubjectEnrollmentView: Manage subject enrollment
- StudentAdvancementCreateView: Advancement tracking

### URLs
- `/`: Student list
- `/create/`: Student creation
- `/<pk>/update/`: Student update
- `/<pk>/enroll/`: Subject enrollment

### Templates
- `student_list.html`: Student overview
- `student_form.html`: Student CRUD
- `student_subject_enrollment.html`: Subject management
- Various advancement templates

---

## Subjects App

### Models

#### SubjectCategory
Subject groupings.
- `name`: CharField
- `school`: ForeignKey to School

#### Subject
Subject definitions.
- `school`: ForeignKey to School
- `name`, `code`: CharFields
- `category`: ForeignKey to SubjectCategory
- `form_levels`: ManyToManyField to FormLevel
- `is_optional`: BooleanField

#### SubjectPaper
Papers within subjects.
- `subject`: ForeignKey to Subject
- `paper_number`: CharField (e.g., 'PP1')
- `max_marks`: IntegerField
- `student_contribution_marks`: IntegerField

#### SubjectPaperRatio
Contribution ratios for papers.
- `subject`: OneToOneField to Subject
- Paper 1-3 max marks and contribution percentages

### Admin
- SubjectAdmin: With paper inline
- SubjectPaperAdmin: List display

### Views
- SubjectListView: Subject overview
- Subject CRUD views: Create, update, delete
- SubjectDetailView: Subject details with papers

### URLs
- `/`: Subject list
- `/create/`: Subject creation
- `/<pk>/`: Subject detail
- Various CRUD URLs

### Templates
- `subject_list.html`: Subject overview
- `subject_form.html`: Subject CRUD
- `subject_detail.html`: Subject information
- Paper management templates

---

## Database Schema Overview

The system uses a multi-tenant architecture where most models have a `school` ForeignKey. Key relationships:

- School → Users (CustomUser)
- School → Students, Subjects, Exams, etc.
- Students ↔ Subjects (ManyToMany)
- Teachers ↔ Classes (TeacherClass)
- Teachers ↔ Subjects (TeacherSubject)
- Exams → Results → Summaries

## Security & Permissions

- Role-based access control (Teacher, Student, HOD, etc.)
- School-level data isolation
- Django's built-in authentication
- Custom mixins for permission checking

## Key Workflows

1. **Exam Management**: Create exam → Assign to forms → Enter results → Generate reports
2. **Student Management**: Register student → Assign subjects → Track advancement
3. **Teacher Management**: Assign classes and subjects → Manage results
4. **Billing**: Generate invoices → Process payments → Track balances
5. **Reporting**: Configure settings → Generate PDFs → Analyze performance

This documentation provides a comprehensive overview of the SchoolCheng-Ji system architecture and implementation.
